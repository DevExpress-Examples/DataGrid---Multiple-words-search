@using ASP_NET_Core.Models

@(Html.DevExtreme().DataGrid<ASP_NET_Core.Models.SampleOrder>()
    .ID("grid")
    .DataSource(d => d.RemoteController()
        .Key("OrderID")
        .LoadUrl("https://js.devexpress.com/Demos/Mvc/api/DataGridWebApi/Orders")
        .OnBeforeSend("dataGrid_beforeSend")
    )
    .RemoteOperations(true)
    .Columns(columns => {
        columns.AddFor(m => m.ShipName).DataType(GridColumnDataType.String);
        columns.AddFor(m => m.ShipAddress).DataType(GridColumnDataType.String);
        columns.AddFor(m => m.ShipCity).DataType(GridColumnDataType.String);
    })
    .CustomizeColumns("dataGrid_customizeColumns")
    .SearchPanel(sp => sp.Visible(true).Width(240).Placeholder("Search"))
    .FilterRow(fr => fr.Visible(true))
    .HeaderFilter(hf => hf.Visible(true))
    .Height(600)
    .Width(800)
    .ColumnAutoWidth(true)
    .ShowBorders(true)
)

<script>
function dataGrid_beforeSend(method, ajaxOptions){
    ajaxOptions.xhrFields = {withCredentials: true};
}    

function dataGrid_customizeColumns(columns) {
    columns.forEach((column) => {
        column.calculateFilterExpression = customCalculateFilterExpression.bind(column);
        column.cellTemplate = customCellTemplate.bind(column);
    })
}

let words;

function splitWithoutDeleting(string, substring){
    let index = string.toLowerCase().indexOf(substring.toLowerCase());
    let startIndex = index;
    let endIndex = index + substring.length;
    if(startIndex === -1) return [string]
    let arr = [string.substring(0, startIndex), string.substring(startIndex, endIndex), string.substring(endIndex, string.length)];
    if(startIndex === 0) arr.shift();
    if(endIndex === string.length) arr.pop();
    return arr;
}

function customCalculateFilterExpression(filterValue, selectedFilterOperation, target) {
    if (target !== 'search' || typeof filterValue !== "string") {
        return this.defaultCalculateFilterExpression.apply(this, arguments);
    }
    if (target === 'search') {
        if(filterValue.trim().length > 0){
            words = filterValue.split(' ').filter(k => k !== '');
            let filter = [];
            words.forEach((word) => {
                filter.push([this.dataField, 'contains', word]);
                filter.push('or');
            });
            filter.pop();
            return filter;
        } else {
            return this.defaultCalculateFilterExpression.apply(this, arguments);
        }
    }
}

function customCellTemplate(container, options) {
    let arr = [options.text];
    if(words) {
        words.forEach(word => {
            for(let i = 0; i<arr.length; i++){
                if(arr[i].toLowerCase().includes(word.toLowerCase())){
                    arr.splice(i, 1, ...splitWithoutDeleting(arr[i], word))
                }
            }
        });
        for(let i = 0; i<arr.length; i++){
            arr[i] = {string: arr[i], highlight: 0}
            words.forEach(word => {
                if(arr[i].string.toLowerCase().includes(word.toLowerCase())){
                    arr[i].highlight = 1;
                }
            })
        }
        for(let i = 0; i<arr.length; i++){
            if(arr[i].highlight){
                let highlightArray = ['<span class="highlighted">', arr[i].string, '</span>'];
                arr.splice(i, 1, ...highlightArray)
            } else
            if(arr[i].string){
                arr[i] = arr[i].string;
            }
        }
    }
    let dataGrid = $("#grid").dxDataGrid("instance");
    if (!dataGrid.option("searchPanel.text")) {
        container.append($('<span>').html(options.text.toString()));
    } else {
        container.append($('<span>').html(arr ? arr.join('').toString() : options.text.toString()));
    }
}
</script>

<style type="text/css">
.highlighted {
    color: #fff;
    background-color: #337ab7;
}
</style>
